{"version":3,"sources":["../utils.js"],"names":["require","ApolloError","jwt","fs","path","ursa","getUser","token","User","verify","secret","userId","findOne","_id","loged","exec","user","name","decoded","decode","findByIdAndUpdate","console","log","pubsub","RedisPubSub","publish","tokenExpired","getPublicKey","Promise","resolve","reject","readFile","join","__dirname","err","data","decryptPassword","password","key","createPrivateKey","readFileSync","decrypt","RSA_PKCS1_PADDING","wrapError","message"],"mappings":";;;;;;;AAAA;;AACA;;;;eACwBA,QAAQ,sBAAR,C;IAAhBC,W,YAAAA,W;;AACR,IAAMC,MAAMF,QAAQ,cAAR,CAAZ;AACA,IAAMG,KAAKH,QAAQ,IAAR,CAAX;AACA,IAAMI,OAAOJ,QAAQ,MAAR,CAAb;AACA,IAAMK,OAAOL,QAAQ,MAAR,CAAb;AACA;AACO,IAAMM;AAAA,qEAAU,iBAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACJP,QAAQ,QAAR,CADI,EACbQ,IADa,aACbA,IADa;AAAA;AAAA,0BAGAN,IAAIO,MAAJ,CAAWF,KAAX,EAAkBG,gBAAlB,CAHA,EAGXC,MAHW,eAGXA,MAHW;AAInB;AACA;;AALmB;AAAA,mBAMAH,KAAKI,OAAL,CAAa,EAAEC,KAAKF,MAAP,EAAeG,OAAO,IAAtB,EAAb,EAA2CC,IAA3C,EANA;;AAAA;AAMbC,gBANa;AAAA,6CAOZA,IAPY;;AAAA;AAAA;AAAA;;AAAA,kBASf,YAAEC,IAAF,KAAW,mBATI;AAAA;AAAA;AAAA;;AAUXC,mBAVW,GAUDhB,IAAIiB,MAAJ,CAAWZ,KAAX,CAVC;;AAWjBC,iBAAKY,iBAAL,CAAuBF,QAAQP,MAA/B,EAAuC,EAACG,OAAO,KAAR,EAAvC,EAAuDC,IAAvD;AACAM,oBAAQC,GAAR,CAAY,cAAZ;AACMC,kBAbW,GAaF,IAAIC,sCAAJ,EAbE;;AAcjBD,mBAAOE,OAAP,CAAe,cAAf,EAA+B,EAACC,cAAcnB,KAAf,EAA/B;AAdiB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;AAmBA,IAAMoB;AAAA,sEAAe;AAAA;AAAA;AAAA;AAAA;AAAA,8CACnB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC3B,iBAAG4B,QAAH,CAAY3B,KAAK4B,IAAL,CAAUC,SAAV,EAAqB,qBAArB,CAAZ,EAAyD,UAACC,GAAD,EAAMC,IAAN,EAAe;AACtE,oBAAID,GAAJ,EACEJ,OAAOI,GAAP,EADF,KAGEL,QAAQM,IAAR;AACH,eALD;AAMD,aAPM,CADmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;AAUA,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AAC3C,MAAMC,MAAMjC,KAAKkC,gBAAL,CAAsBpC,GAAGqC,YAAH,CAAgBpC,KAAK4B,IAAL,CAAUC,SAAV,EAAqB,sBAArB,CAAhB,CAAtB,CAAZ;AACA,SAAOK,IAAIG,OAAJ,CAAYJ,QAAZ,EAAsB,QAAtB,EAAgC,MAAhC,EAAwChC,KAAKqC,iBAA7C,CAAP;AACD,CAHM;AAIA,IAAMC,gCAAY,SAAZA,SAAY,CAACT,GAAD,EAAS;AAChC,MAAIA,eAAejC,WAAnB,EAAgC,OAAOiC,GAAP,CAAhC,KACK,OAAO,IAAIjC,WAAJ,CAAgBiC,IAAIU,OAApB,EAA6BV,IAAIjB,IAAjC,CAAP;AACN,CAHM","file":"utils.js","sourcesContent":["import { RedisPubSub } from 'graphql-redis-subscriptions'\nimport { secret } from './settings'\nconst { ApolloError } = require(\"apollo-server-errors\")\nconst jwt = require('jsonwebtoken')\nconst fs = require('fs')\nconst path = require('path')\nconst ursa = require('ursa')\n// 返回的是promise，调用的时候必须实用await\nexport const getUser = async (token) => {\n  const { User } = require('./User')\n  try {\n    const { userId } = jwt.verify(token, secret)\n    // User不能在最前面使用import导入，因为User.js里导入了util.js,util.js里也要导入User.js，这样会导致util.js导入User的时候\n    // User还是undefined,所以要把User的导入放在函数里，这样才能确保导入User的时候User已经初始化了\n    const user = await User.findOne({ _id: userId, loged: true }).exec()\n    return user\n  } catch (e) {\n    if (e.name === 'TokenExpiredError') {\n      const decoded = jwt.decode(token)\n      User.findByIdAndUpdate(decoded.userId, {loged: false}).exec()\n      console.log('登陆过期，已自动退出登陆')\n      const pubsub = new RedisPubSub()\n      pubsub.publish('tokenExpired', {tokenExpired: token})\n    } else\n      throw e\n  }\n}\nexport const getPublicKey = async () => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path.join(__dirname, '../rsa_1024_pub.pem'), (err, data) => {\n      if (err)\n        reject(err)\n      else\n        resolve(data)\n    })\n  })\n}\nexport const decryptPassword = (password) => {\n  const key = ursa.createPrivateKey(fs.readFileSync(path.join(__dirname, '../rsa_1024_priv.pem')))\n  return key.decrypt(password, 'base64', 'utf8', ursa.RSA_PKCS1_PADDING)\n}\nexport const wrapError = (err) => {\n  if (err instanceof ApolloError) return err\n  else return new ApolloError(err.message, err.name)\n}"]}