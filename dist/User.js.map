{"version":3,"sources":["../User.js"],"names":["require","ValidationError","ForbiddenError","AuthenticationError","jwt","pinyin","mongoose","UserSchema","Schema","username","type","String","unique","required","password","min","max","validate","validator","v","test","message","department","role","loged","Boolean","default","avatar","email","props","value","User","model","e","name","pubsub","RedisPubSub","registerLogOutListener","token","timer","setTimeout","decoded","decode","findByIdAndUpdate","userId","exec","clearTimeout","console","log","publish","tokenExpired","expiresIn","exceedAdminCount","Role","find","isAdmin","roles","ids","map","id","count","$in","adminCount","AdminUsersCount","translate","array","style","STYLE_NORMAL","reduce","memo","char","push","join","generateUserModel","signUp","rest","Promise","resolve","reject","uncrypted","translation","save","doc","sign","_id","secret","err","signature","user","indexOf","delete","findById","findByIdAndDelete","update","logedUser","role2","new","changePassword","findOneAndUpdate","logIn","findOne","logOut","listUsers","skip","limit","_Role","query","getLogedUser","byId","byName","byNameOrEmail","search","verify","aggregate","facet","whose","$match","$expr","$eq","$toString","friend","$or","project","$arrayElemAt","$cond","$gt","$size","lookup","from","let","whoseId","friendId","pipeline","$and","as","status","result","getCaptcha","nodemailer","svgCaptcha","captcha","create","transporter","createTransport","host","port","secure","auth","emailAccount","pass","emailPassword","mailOptions","to","subject","text","html","data","sendMail","error","info","module","exports"],"mappings":"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","file":"User.js","sourcesContent":["import { expiresIn, secret, AdminUsersCount, emailAccount, emailPassword } from './settings'\nimport { getUser, wrapError } from './utils'\nimport { Role } from './Role'\nimport { decryptPassword } from './utils'\nimport { RedisPubSub } from 'graphql-redis-subscriptions'\nconst { ValidationError, ForbiddenError, AuthenticationError } = require(\"apollo-server-errors\")\nconst jwt = require('jsonwebtoken')\nconst pinyin = require(\"pinyin\")\nconst mongoose = require('mongoose')\nconst UserSchema = mongoose.Schema({\n  username: {type: String, unique: true, required: true},\n  pinyin: {type: String, required: true},\n  password: {\n    type: String,\n    required: true,\n    min: [6, '密码不能少于6个字符'],\n    max: [20, '密码不能超过20个字符'],\n    validate: {\n      validator: function(v) {\n        return !/\\W/g.test(v);\n      },\n      message: props => '密码只能是字母、数字或下划线!'\n    }\n  },\n  department: {type: String, required: true},\n  role: {type: String, required: true},\n  loged: {type: Boolean, required: true, default: false},\n  avatar: String,\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/.test(v)\n      },\n      message: props => `${props.value}不是正确的电子邮件格式`\n    }\n  }\n})\nlet User = null\ntry {\n  User = mongoose.model('User', UserSchema)\n} catch (e) {\n  if (e.name === 'OverwriteModelError') {\n    User = mongoose.model('User')\n  }\n}\nconst pubsub = new RedisPubSub()\nconst registerLogOutListener = (token) => {\n  const timer = setTimeout(() => {\n    const decoded = jwt.decode(token)\n    User.findByIdAndUpdate(decoded.userId, {loged: false}).exec()\n    clearTimeout(timer)\n    console.log('登陆过期，已自动退出登陆')\n    pubsub.publish('tokenExpired', {tokenExpired: token})\n  }, expiresIn * 1000)\n}\nconst exceedAdminCount = async () => {\n  const { Role } = require('./Role')\n  const roles = await Role.find({ isAdmin: true }).exec()\n  const ids = roles.map(role => role.id)\n  const adminCount = await User.count({ role: { $in: ids } }).exec()\n  return adminCount >= AdminUsersCount\n}\nconst translate = (username) => {\n  const array = pinyin(username, {style: pinyin.STYLE_NORMAL})\n  return array.reduce((memo, char) => {\n    memo = memo.push(...char)\n    return memo\n  }, []).join('')\n}\nconst generateUserModel = (token) => ({\n  // createSampleUsers: () => {\n  //   return new Promise(async (resolve, reject) => {\n  //     try {\n  //       const data = []\n  //       for (let i=0;i<26;i++) {\n  //         const username = `${String.fromCharCode(65 + i)}TestUser`\n  //         data.push({\n  //           username,\n  //           pinyin: username.toLowerCase(),\n  //           password: '123456',\n  //           role: '5b593639fc96452d7563a4f8',\n  //           department: '无',\n  //           email: `test${i}@example.com`\n  //         })\n  //       }\n  //       await User.insertMany(data)\n  //       resolve(true)\n  //     } catch (e) {\n  //       reject(e)\n  //     }\n  //   })\n  // },\n  signUp: ({ password, ...rest }) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // const { Role } = require('./Role')\n        // const roles = await Role.find({ isAdmin: true }).exec()\n        // const ids = roles.map(role => role.id)\n        // const adminCount = await User.count({ role: { $in: ids } }).exec()\n        if (exceedAdminCount() && rest.isAdmin) throw new ForbiddenError('管理员账户已达到最大数量')\n        const uncrypted = decryptPassword(password)\n        const translation = translate(rest.username)\n        const doc = await new User({ ...rest, pinyin: translation, password: uncrypted, loged: true }).save()\n        jwt.sign({ userId: doc._id }, secret, { expiresIn }, function (err, signature) {\n          if (err) throw err\n          else {\n            registerLogOutListener(signature)\n            resolve({ token: signature, user: doc })\n          }\n        })\n      } catch (e) {\n        if(e.message.indexOf('duplicate key error') > -1) reject(new ValidationError('用户名或电子邮件已经被使用'))\n        reject(wrapError(e))\n      }\n    })\n  },\n  delete: ({ userId }) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const user = await getUser(token)\n        const { Role } = require('./Role')\n        const role = await Role.findById(user.role).exec()\n        if (!role.isAdmin) throw new ForbiddenError('无权删除用户')\n        await User.findByIdAndDelete(userId).exec()\n        resolve(true)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  // username,password,department可以由用户自己更改，role只有管理员才能改，管理员可以修改所有人的信息，所以userId可以和当前登陆用户的id不一样\n  update: ({ userId, ...rest }) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const logedUser = await getUser(token)\n        const { Role } = require('./Role')\n        const role = await Role.findById(logedUser.role).exec()\n        if (!role.isAdmin && rest.role) throw new ForbiddenError('只有管理员才可以指定角色')\n        if (!role.isAdmin && userId !== logedUser.id) throw new ForbiddenError('不能修改别人的信息')\n        if (rest.role) {\n          const role2 = await Role.findById(rest.role).exec()\n          if (role2.isAdmin && exceedAdminCount()) throw new ForbiddenError('管理员账户已达到最大数量')\n        }\n        const translation = rest.username ? {pinyin: translate(rest.username)} : {}\n        const password = rest.password ? { password: decryptPassword(rest.password) } : {}\n        const update = { ...rest, ...password, ...translation }\n        const user = await User.findByIdAndUpdate(userId, update, { new: true }).exec()\n        resolve(user)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  changePassword: ({ email, password }) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const user = await User.findOneAndUpdate({email}, {password: decryptPassword(password)}, {new: true}).exec()\n        resolve(user)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n\n  },\n  logIn: ({ username, password }) => {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let doc = await User.findOne({ username }).exec()\n        const uncrypted = decryptPassword(password)\n        if (uncrypted !== doc.password) throw new ValidationError('密码错误')\n        doc.loged = true\n        doc = await doc.save()\n        jwt.sign({ userId: doc._id }, secret, { expiresIn }, function (err, signature) {\n          if (err) throw err\n          else {\n            registerLogOutListener(signature)\n            resolve({ token: signature, user: doc })\n          }\n        })\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  logOut: () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const user = await getUser(token)\n        user.loged = false\n        await user.save()\n        resolve(true)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  listUsers: ({skip, limit}) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const user = await getUser(token)\n        const _Role = require('./Role').Role\n        const role = await _Role.findById(user.role).exec()\n        if (!role.isAdmin) throw new ForbiddenError('无权限查看所有用户')\n        else {\n          let query = User.find({})\n          if (typeof skip === 'number') query = query.skip(skip)\n          if (typeof limit === 'number') query = query.limit(limit)\n          resolve(await query.exec())\n        }\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  getLogedUser: () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        resolve(await getUser(token))\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  byId: ({ id }) => {\n    return User.findById(id).exec()\n  },\n  byName: ({ username }) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const user = await getUser(token)\n        const _Role = require('./Role').Role\n        const role = await _Role.findById(user.role).exec()\n        if (!role.isAdmin) throw new ForbiddenError('没有权限')\n        resolve(await User.findOne({username}).exec())\n      } catch (e) {\n        reject(e)\n      }\n    })\n  },\n  byNameOrEmail: ({ search }) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const { userId } = jwt.verify(token, secret)\n        // 首先使用facet查出当前登录用户和被检索的用户\n        const result = await User.aggregate().facet({\n          whose: [{\n            $match: {\n              $expr: {\n                $eq: [userId, {$toString: '$_id'}]\n              }\n            }\n          }],\n          friend: [{\n            $match: {\n              $or: [{username: search}, {email: search}]\n            }\n          }]\n        }).project({ // 用whose和friend来保存当前登录用户和被检索用户的_id，user保存被检索用户的全部字段\n          whose: {$arrayElemAt: ['$whose._id', 0]},\n          friend: {\n            $cond: [{$gt: [{$size: '$friend'}, 0]}, {$arrayElemAt: ['$friend._id', 0]}, '']\n          },\n          user: {\n            $cond: [{$gt: [{$size: '$friend'}, 0]}, {$arrayElemAt: ['$friend', 0]}, null]\n          }\n        }).lookup({ // 使用lookup的另一种语法，链接friends集合，查询当前登录用户和被检索用户之间是否存在朋友关系\n          from: 'friends',\n          let: {whoseId: '$whose', friendId: '$friend'},\n          pipeline: [{\n            $match: {\n              $expr: {\n                $or: [\n                  {$and: [{$eq: ['$whose', '$$whoseId']}, {$eq: ['$friend', '$$friendId']}]},\n                  {$and: [{$eq: ['$whose', '$$friendId']}, {$eq: ['$friend', '$$whoseId']}]},\n                ]\n              }\n            }\n          }],\n          as: 'friendship'\n          // 根据前面几步，friend字段直接返回被检索到的用户，如果没有检索到用户就返回null，status字段返回当前登录用户和被检索用户之间的朋友关系状态：\n          // None代表没有朋友关系，或者返回查询到的friend的state字段，有2个可能的值：Unapproved代表等待验证，Approved代表已通过朋友验证\n        }).project({\n          friend: '$user',\n          status: {\n            $cond: [{$gt: [{$size: '$friendship'}, 0]}, {$arrayElemAt: ['$friendship.state', 0]}, 'None']\n          }\n        }).exec()\n        // console.log(JSON.stringify(result))\n        resolve(result[0])\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  getCaptcha: ({ email }) => {\n    const nodemailer = require('nodemailer')\n    return new Promise(async (resolve, reject) => {\n      const user = await User.findOne({email}).exec()\n      if (!user) reject(new ForbiddenError(`${email}不是密保邮箱，请输入注册用户时填写的邮箱`))\n      const svgCaptcha = require('svg-captcha')\n      const captcha = svgCaptcha.create()\n      let transporter = nodemailer.createTransport({\n        host: 'smtp.163.com',\n        port: 465,\n        secure: true,\n        auth: {\n          user: emailAccount,\n          pass: emailPassword\n        }\n      })\n      let mailOptions = {\n        from: '\"管理员\" <wsj-88488111@163.com>',\n        to: email,\n        subject: '找回密码',\n        text: captcha.text,\n        html: `<div><h1>验证码为:</h1>${captcha.data}</div>`\n      }\n      transporter.sendMail(mailOptions, (error, info) => {\n        if (error) {\n          reject(wrapError(error))\n        }\n        resolve(captcha.text)\n      })\n    })\n  }\n})\nmodule.exports = { User, generateUserModel }\n"]}