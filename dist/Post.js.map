{"version":3,"sources":["../Post.js"],"names":["require","AuthenticationError","PostSchema","mongoose","Schema","postBy","type","Types","ObjectId","required","message","String","iat","Date","default","now","read","Map","of","Boolean","sessionId","Post","model","e","name","generatePostModel","token","addPost","Promise","resolve","reject","logedUser","Conversation","findById","exec","participators","console","log","length","filter","userId","_id","map","id","post","save","conversation"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;;;eACgCA,QAAQ,sBAAR,C;IAAxBC,mB,YAAAA,mB;;AAER,IAAMC,aAAaC,mBAASC,MAAT,CAAgB;AACjCC,UAAQ;AACNC,UAAMH,mBAASC,MAAT,CAAgBG,KAAhB,CAAsBC,QADtB;AAENC,cAAU;AAFJ,GADyB;AAKjCC,WAAS;AACPJ,UAAMK,MADC;AAEPF,cAAU;AAFH,GALwB;AASjCG,OAAK;AACHN,UAAMO,IADH;AAEHC,aAASD,KAAKE,GAAL;AAFN,GAT4B;AAajCC,QAAM;AACJV,UAAMW,GADF;AAEJC,QAAIC,OAFA;AAGJV,cAAU;AAHN,GAb2B;AAkBjCW,aAAW;AACTd,UAAMH,mBAASC,MAAT,CAAgBG,KAAhB,CAAsBC,QADnB;AAETC,cAAU;AAFD;AAlBsB,CAAhB,CAAnB;AAuBA,IAAIY,OAAO,IAAX;AACA,IAAI;AACF,UAgCOA,IAhCP,UAAOlB,mBAASmB,KAAT,CAAe,MAAf,EAAuBpB,UAAvB,CAAP;AACD,CAFD,CAEE,OAAOqB,CAAP,EAAU;AACV,MAAIA,EAAEC,IAAF,KAAW,qBAAf,EAAsC;AACpC,YA6BKH,IA7BL,UAAOlB,mBAASmB,KAAT,CAAe,MAAf,CAAP;AACD;AACF;;AAED,IAAMG,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD;AAAA,SAAY;AACpCC,aAAS,uBAA0B;AAAA,UAAxBjB,OAAwB,QAAxBA,OAAwB;AAAA,UAAfU,SAAe,QAAfA,SAAe;;AACjC,aAAO,IAAIQ,OAAJ;AAAA,4EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sBAEVJ,KAFU;AAAA;AAAA;AAAA;;AAAA,wBAEG,IAAIzB,mBAAJ,CAAwB,OAAxB,CAFH;;AAAA;AAAA;AAAA,yBAGS,oBAAQyB,KAAR,CAHT;;AAAA;AAGTK,2BAHS;AAITC,8BAJS,GAIMhC,QAAQ,gBAAR,EAA0BgC,YAJhC;AAAA;AAAA,yBAKeA,aAAaC,QAAb,CAAsBb,SAAtB,EAAiC,eAAjC,EAAkDc,IAAlD,EALf;;AAAA;AAAA;AAKRC,+BALQ,SAKRA,aALQ;;AAMfC,0BAAQC,GAAR,CAAYF,cAAcG,MAA1B;AACMtB,sBAPS,GAOFmB,cAAcI,MAAd,CAAqB;AAAA,2BAAUC,WAAWT,UAAUU,GAA/B;AAAA,mBAArB,EAAyDC,GAAzD,CAA6D;AAAA,+CAASC,EAAT,EAAc,KAAd;AAAA,mBAA7D,CAPE;;AAQfP,0BAAQC,GAAR,CAAYrB,KAAKsB,MAAjB;AACMM,sBATS,GASF;AACXlC,oCADW;AAEXU,wCAFW;AAGXJ,8BAHW;AAIXX,4BAAQ0B,UAAUU;AAJP,mBATE;AAAA;AAAA,yBAeY,IAAIpB,IAAJ,CAASuB,IAAT,EAAeC,IAAf,EAfZ;;AAAA;AAeTC,8BAfS;;AAgBfjB,0BAAQiB,YAAR;AAhBe;AAAA;;AAAA;AAAA;AAAA;;AAkBfhB,yBAAO,kCAAP;;AAlBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AAqBD;AAvBmC,GAAZ;AAAA,CAA1B;QAyBST,I,GAAAA,I;QAAMI,iB,GAAAA,iB","file":"Post.js","sourcesContent":["import mongoose from 'mongoose'\nimport { getUser, wrapError } from './utils'\nconst { AuthenticationError } = require(\"apollo-server-errors\")\n\nconst PostSchema = mongoose.Schema({\n  postBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    required: true\n  },\n  message: {\n    type: String,\n    required: true\n  },\n  iat: {\n    type: Date,\n    default: Date.now()\n  },\n  read: {\n    type: Map,\n    of: Boolean,\n    required: true\n  },\n  sessionId: {\n    type: mongoose.Schema.Types.ObjectId,\n    required: true\n  }\n})\nlet Post = null\ntry {\n  Post = mongoose.model('Post', PostSchema)\n} catch (e) {\n  if (e.name === 'OverwriteModelError') {\n    Post = mongoose.model('Post')\n  }\n}\n\nconst generatePostModel = (token) => ({\n  addPost: ({message, sessionId}) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const logedUser = await getUser(token)\n        const Conversation = require('./Conversation').Conversation\n        const {participators} = await Conversation.findById(sessionId, 'participators').exec()\n        console.log(participators.length)\n        const read = participators.filter(userId => userId !== logedUser._id).map(id => ({[id]: false}))\n        console.log(read.length)\n        const post = {\n          message,\n          sessionId,\n          read,\n          postBy: logedUser._id\n        }\n        const conversation = await new Post(post).save()\n        resolve(conversation)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  }\n})\nexport { Post, generatePostModel }"]}