{"version":3,"sources":["../Conversation.js"],"names":["require","AuthenticationError","ConversationSchema","mongoose","Schema","participators","type","Types","ObjectId","required","validate","validator","v","length","message","posts","default","Conversation","model","e","name","generateConversationModel","token","establishConversation","Promise","resolve","reject","logedUser","_id","save","conversation"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;;;eACgCA,QAAQ,sBAAR,C;IAAxBC,mB,YAAAA,mB;;AAER,IAAMC,qBAAqBC,mBAASC,MAAT,CAAgB;AACzCC,iBAAe;AACbC,UAAM,CAACH,mBAASC,MAAT,CAAgBG,KAAhB,CAAsBC,QAAvB,CADO;AAEbC,cAAU,IAFG;AAGbC,cAAU;AACRC,iBAAW,mBAAUC,CAAV,EAAa;AACtB,eAAOA,EAAEC,MAAF,IAAY,CAAnB;AACD,OAHO;AAIRC,eAAS;AAJD;AAHG,GAD0B;AAWzCC,SAAO;AACLT,UAAM,CAACH,mBAASC,MAAT,CAAgBG,KAAhB,CAAsBC,QAAvB,CADD;AAELQ,aAAS;AAFJ;AAXkC,CAAhB,CAA3B;AAgBA,IAAIC,eAAe,IAAnB;AACA,IAAI;AACF,UAqBOA,YArBP,kBAAed,mBAASe,KAAT,CAAe,cAAf,EAA+BhB,kBAA/B,CAAf;AACD,CAFD,CAEE,OAAOiB,CAAP,EAAU;AACV,MAAIA,EAAEC,IAAF,KAAW,qBAAf,EAAsC;AACpC,YAkBKH,YAlBL,kBAAed,mBAASe,KAAT,CAAe,cAAf,CAAf;AACD;AACF;;AAED,IAAMG,4BAA4B,SAA5BA,yBAA4B,CAACC,KAAD;AAAA,SAAY;AAC5CC,2BAAuB,qCAAqB;AAAA,UAAnBlB,aAAmB,QAAnBA,aAAmB;;AAC1C,aAAO,IAAImB,OAAJ;AAAA,4EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sBAEVJ,KAFU;AAAA;AAAA;AAAA;;AAAA,wBAEG,IAAIrB,mBAAJ,CAAwB,OAAxB,CAFH;;AAAA;AAAA;AAAA,yBAGS,oBAAQqB,KAAR,CAHT;;AAAA;AAGTK,2BAHS;AAAA;AAAA,yBAIY,IAAIV,YAAJ,CAAiB,EAACZ,4CAAmBA,aAAnB,IAAkCsB,UAAUC,GAA5C,EAAD,EAAjB,EAAqEC,IAArE,EAJZ;;AAAA;AAITC,8BAJS;;AAKfL,0BAAQK,YAAR;AALe;AAAA;;AAAA;AAAA;AAAA;;AAOfJ,yBAAO,kCAAP;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AAUD;AAZ2C,GAAZ;AAAA,CAAlC;QAcST,Y,GAAAA,Y;QAAcI,yB,GAAAA,yB","file":"Conversation.js","sourcesContent":["import mongoose from 'mongoose'\nimport { getUser, wrapError } from './utils'\nconst { AuthenticationError } = require(\"apollo-server-errors\")\n\nconst ConversationSchema = mongoose.Schema({\n  participators: {\n    type: [mongoose.Schema.Types.ObjectId],\n    required: true,\n    validate: {\n      validator: function (v) {\n        return v.length >= 2\n      },\n      message: '会话至少需要两个人'\n    }\n  },\n  posts: {\n    type: [mongoose.Schema.Types.ObjectId],\n    default: []\n  }\n})\nlet Conversation = null\ntry {\n  Conversation = mongoose.model('Conversation', ConversationSchema)\n} catch (e) {\n  if (e.name === 'OverwriteModelError') {\n    Conversation = mongoose.model('Conversation')\n  }\n}\n\nconst generateConversationModel = (token) => ({\n  establishConversation: ({participators}) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const logedUser = await getUser(token)\n        const conversation = await new Conversation({participators: [...participators, logedUser._id]}).save()\n        resolve(conversation)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  }\n})\nexport { Conversation, generateConversationModel }"]}