{"version":3,"sources":["../Friend.js"],"names":["require","AuthenticationError","pubsub","RedisPubSub","FriendSchema","mongoose","Schema","whose","type","Types","ObjectId","required","friend","state","String","default","enum","validateMessage","index","Friend","model","e","name","generateFriendModel","token","addFriend","context","Promise","resolve","reject","logedUser","data","_id","save","doc","models","User","byId","id","initiator","publish","friendAdded","toObject","approveFriend","findByIdAndUpdate","new","exec","friendApproved","getUnapprovedFriends","find","friends","getFriends","skip","limit","aggregate","facet","others","$match","$lookup","from","localField","foreignField","as","mine","project","users","$concatArrays","unwind","group","$toUpper","$substr","$arrayElemAt","$push","sort","result","module","exports"],"mappings":"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","file":"Friend.js","sourcesContent":["import mongoose from 'mongoose'\nimport { RedisPubSub } from 'graphql-redis-subscriptions'\nimport { getUser, wrapError } from './utils'\n\nconst { AuthenticationError } = require(\"apollo-server-errors\")\nconst pubsub = new RedisPubSub()\n\nconst FriendSchema = mongoose.Schema({\n  whose: {\n    type: mongoose.Schema.Types.ObjectId,\n    required: true\n  },\n  friend: {\n    type: mongoose.Schema.Types.ObjectId,\n    required: true\n  },\n  state: {\n    type: String,\n    default: 'Unapproved',\n    enum: ['Unapproved', 'Approved']\n  },\n  validateMessage: {\n    type: String,\n    required: true\n  }\n})\nFriendSchema.index({whose: 1, friend: 1})\nlet Friend = null\ntry {\n  Friend = mongoose.model('Friend', FriendSchema)\n} catch (e) {\n  if (e.name === 'OverwriteModelError') {\n    Friend = mongoose.model('Friend')\n  }\n}\n\nconst generateFriendModel = (token) => ({\n  // addFriends: () => {\n  //   return new Promise(async (resolve, reject) => {\n  //     try {\n  //       if (!token) throw new AuthenticationError('用户未登陆')\n  //       const logedUser = await getUser(token)\n  //       const data = []\n  //       for (let i=130;i<156; i++) {\n  //         data.push({\n  //           whose: logedUser.id,\n  //           friend: `5b91e4377b03c708775e27${i.toString(16)}`,\n  //           state: 'Approved'\n  //         })\n  //       }\n  //       Friend.insertMany(data,function (err, res) {\n  //         if (err) reject(err)\n  //         else resolve(true)\n  //       })\n  //     } catch (e) {\n  //       reject(wrapError(e))\n  //     }\n  //   })\n  // },\n  addFriend: ({friend, validateMessage}, context) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const logedUser = await getUser(token)\n        const data = { friend, validateMessage, whose: logedUser._id}\n        const doc = await new Friend(data).save()\n        const initiator = await context.models.User.byId({id: doc.whose})\n        pubsub.publish('friendAdded', {friendAdded: {...doc.toObject(), initiator, id: doc._id}})\n        resolve(doc)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  approveFriend: ({id}, context) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const doc = await Friend.findByIdAndUpdate(id, {state: 'Approved'}, {new: true}).exec()\n        const initiator = await context.models.User.byId({id: doc.whose})\n        pubsub.publish('friendApproved', {friendApproved: {...doc.toObject(), initiator, id: doc._id}})\n        resolve(doc)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  getUnapprovedFriends: () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const logedUser = await getUser(token)\n        if (!logedUser) throw new AuthenticationError('用户未登陆')\n        const friends = await Friend.find({\n          state: 'Unapproved',\n          friend: logedUser._id\n        }).exec()\n        resolve(friends)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  },\n  getFriends ({skip, limit}, context) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (!token) throw new AuthenticationError('用户未登陆')\n        const logedUser = await getUser(token)\n        // others代表别人加我好友，mine代表我主动加别人好友\n        const result = await Friend.aggregate().facet({\n          others: [\n            {\n              $match: {state: 'Approved', friend: logedUser._id}\n            },\n            {\n              $lookup: {\n                from: 'users',\n                localField: 'whose',\n                foreignField: '_id',\n                as: 'user'\n              }\n            }\n          ],\n          mine: [\n            {\n              $match: {state: 'Approved', whose: logedUser._id}\n            },\n            {\n              $lookup: {\n                from: 'users',\n                localField: 'friend',\n                foreignField: '_id',\n                as: 'user'\n              }\n            }\n          ]\n        }).project({\n          users: {\n            $concatArrays: ['$mine', '$others']\n          }\n        }).unwind('users').group({\n          _id: {\n            $toUpper: {\n              $substr: [{\n                $arrayElemAt: ['$users.user.pinyin', 0]\n              }, 0, 1]\n            }\n          },\n          friends: {\n            $push: {$arrayElemAt: ['$users.user', 0]}\n          }\n        }).project({\n          _id: 0,\n          group: '$_id',\n          friends: 1\n        }).sort('group').skip(skip).limit(limit).exec()\n        resolve(result)\n      } catch (e) {\n        reject(wrapError(e))\n      }\n    })\n  }\n})\nmodule.exports = { Friend, generateFriendModel }"]}