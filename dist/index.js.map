{"version":3,"sources":["../index.js"],"names":["require","router","get","post","options","ApolloServer","cors","server","typeDefs","resolvers","context","req","Authorization","headers","authorization","token","replace","models","User","Role","Friend","graphqlPath","graphqlHandler","createHandler","path","module","exports","res"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;eAEuCA,QAAQ,aAAR,C;IAA/BC,M,YAAAA,M;IAAQC,G,YAAAA,G;IAAKC,I,YAAAA,I;IAAMC,O,YAAAA,O;;gBACFJ,QAAQ,qBAAR,C;IAAjBK,Y,aAAAA,Y;;AACR,IAAMC,OAAON,QAAQ,YAAR,GAAb;;AAEA,IAAMO,SAAS,IAAIF,YAAJ,CAAiB;AAC9BG,4BAD8B;AAE9BC,gCAF8B;AAG9BC;AAAA,wEAAS;AAAA,UAASC,GAAT,QAASA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,2BADC,GACeD,IAAIE,OAAJ,CAAYC,aAAZ,IAA6B,EAD5C;AAEP;;AACMC,mBAHC,GAGOH,cAAcI,OAAd,CAAsB,SAAtB,EAAiC,EAAjC,CAHP;AAAA,+CAIA;AACLC,wBAAQ;AACNC,wBAAM,6BAAkBH,KAAlB,CADA;AAENI,wBAAM,6BAAkBJ,KAAlB,CAFA;AAGNK,0BAAQ,iCAAoBL,KAApB;AAHF;AADH,eAJA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAH8B,CAAjB,CAAf;AAgBA,IAAMM,cAAc,cAApB;AACA,IAAMC,iBAAiBhB,KAAKC,OAAOgB,aAAP,CAAqB,EAAEC,MAAMH,WAAR,EAArB,CAAL,CAAvB;;AAEAI,OAAOC,OAAP,GAAiBzB,OACfC,IAAI,GAAJ,EAAS,UAACS,GAAD,EAAMgB,GAAN;AAAA,SAAc,UAAd;AAAA,CAAT,CADe,EAEfvB,QAAQiB,WAAR,EAAqBC,cAArB,CAFe,EAGfnB,KAAKkB,WAAL,EAAkBC,cAAlB,CAHe,EAIfpB,IAAImB,WAAJ,EAAiBC,cAAjB,CAJe,CAAjB","file":"index.js","sourcesContent":["import \"regenerator-runtime/runtime\"\nimport typeDefs from './schema'\nimport resolvers from './resolvers'\nimport db from './db'\nimport { User, generateUserModel } from './User'\nimport { Role, generateRoleModel } from './Role'\nimport { Friend, generateFriendModel } from './Friend'\n\nconst { router, get, post, options } = require('microrouter')\nconst { ApolloServer } = require('apollo-server-micro')\nconst cors = require('micro-cors')()\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({ req }) => {\n    const Authorization = req.headers.authorization || ''\n    // console.log(req.headers)\n    const token = Authorization.replace('Bearer ', '')\n    return {\n      models: {\n        User: generateUserModel(token),\n        Role: generateRoleModel(token),\n        Friend: generateFriendModel(token)\n      }\n    }\n  }\n})\nconst graphqlPath = '/graphqlUser'\nconst graphqlHandler = cors(server.createHandler({ path: graphqlPath }))\n\nmodule.exports = router(\n  get('/', (req, res) => 'Welcome!'),\n  options(graphqlPath, graphqlHandler),\n  post(graphqlPath, graphqlHandler),\n  get(graphqlPath, graphqlHandler)\n)\n"]}